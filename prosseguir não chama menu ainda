# AGORA VAI
###################################------CLASSES------######################################
class Administrador():
	login = 1
	senha = 1

class cliente():
	primeiro_nome = ''
	ultimo_nome = ''
	CPF = ''
	senha = ''
	limite_credito = 0
	cartão = 0


###################################------FUNÇÕES------######################################
def inserirDados():

	prosseguir = 'false'

	while prosseguir != 'true':

		c=cliente() #instanciando
		c.primeiro_nome=input('Insira o primeiro nome')
		c.ultimo_nome=input('Insira o ultimo nome')
		c.CPF=input('Insira o CPF')
		#VALIDAR CPF
		validar_cpf = validaCPF(c.CPF)

		if (validar_cpf == 'true'):
			prosseguir = 'true'

		c.senha = input('Insira sua senha: ')
		c.cartao = gerar_numcartao()
		c.limite_credito = int(input('Insira o limite de crédito: '))

	return c


# as primeiras duas funções abaixo serviram para validação do cpf
def multip1(cpf):
	v1 = cpf[0] * 10
	v2 = cpf[1] * 9
	v3 = cpf[2] * 8
	v4 = cpf[3] * 7
	v5 = cpf[4] * 6
	v6 = cpf[5] * 5
	v7 = cpf[6] * 4
	v8 = cpf[7] * 3
	v9 = cpf[8] * 2
	soma = (v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + v9)
	rest = soma % 11
	return rest


def multip2(cpf):

	v1 = cpf[0] * 11
	v2 = cpf[1] * 10
	v3 = cpf[2] * 9
	v4 = cpf[3] * 8
	v5 = cpf[4] * 7
	v6 = cpf[5] * 6
	v7 = cpf[6] * 5
	v8 = cpf[7] * 4
	v9 = cpf[8] * 3
	v10 = cpf[9] * 2
	soma = (v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + v9 + v10)
	rest1 = soma % 11
	return rest1

def validaCPF(X):
	cpf = X
	cpf = list(map(int, cpf))
	rest = multip1(cpf)

	result = 'false'

	if rest < 2:
		rest = 0
		if rest == cpf[9]:
			rest1 = multip2(cpf)
			if rest1 < 2:
				rest1 = 0
				if rest1 == cpf[10]:
					print('CPF válido')
					result = 'true'
				else:
					cliente.cpfCliente = int(input('CPF inválido. Insira de novo:'))
			else:
				rest1 = 11 - rest1
				if rest1 == cpf[10]:
					print('CPF válido')
					result = 'true'
				else:
					cliente.cpfCliente = int(input('CPF inválido. Insira de novo'))
		else:
			cliente.cpfCliente = int(input('10º digito inválido.Insira de novo.'))
	else:
		rest = 11 - rest
		if rest == cpf[9]:
			rest1 = multip2(cpf)
			if rest1 < 2:
				rest1 = 0
				if rest1 == cpf[10]:
					print('11º digito correto. CPF válido')
					result = 'true'
				else:
					cliente.cpfCliente = int(input('11º digito inválido.Insira novamente'))
			else:
				rest1 = 11 - rest1
				if rest1 == cpf[10]:
					print('11º digito correto. CPF válido')
					result = 'true'
				else:
					cliente.cpfCliente = int(input('11º digito inválido.Insira novamente'))

		else:
			cliente.cpfCliente = int(input('10º dígito inválido. Insira novamente'))

	return result



def sucesso(catmercado, catsaude, catdiveros): #inacabado. não tem link de nada em lugar algum, n relaciono o cliente com o saldo nunca

	if valorvar == 1:
		print('Compra alocada na categoria: Mercado')
		catmercado = catmercado + valorcompra
		print(catmercado)
		return catmercado
	elif valorvar == 2:
		catsaude = catsaude + valorcompra
		print('Compra alocada na categoria: Saúde')
		return catsaude
	elif valorvar == 3:
		catdiversos = diversos + valorcompra
		print('Compra alocada na categoria: Diversos')
		return catdiversos
	else:
		print('Categoria inexistente. Contate nossos desenvolvedores para mais informações :) ')


def gerar_numcartao(): 
	from random import choice
	lista = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
	numcartao = choice(lista) + choice(lista) + choice(lista) + choice(lista) + ' ' + choice(lista) + choice(lista) + choice(lista) + choice(lista) + ' ' + choice(lista) + choice(lista) + choice(lista) + choice(
	lista) + ' ' + choice(lista) + choice(lista) + choice(lista) + choice(lista)
	return numcartao

def validarLogin(nome, senha):   #INACABADOOOOOOOOOOOO
	nome = nome
	senha = senha
	for i in range (len(dados)): 
		if dados[i].primeiro_nome == nome: 
			#usuário corresponde
			if dados[i].senha == senha:
				print('Usuário válido')
			else:
				senha = input('digite novamente sua senha: ')
				
				if dados[i].senha == senha:
					print('Deu certo o loginho')
					
	return 
					
def meuMenu(menu): #tentativa de criar um menu para chamar mais facil qd precisar voltar nele
	menu = menu
	print(' 1 - Acesso Administrador \n 2 - Login de usuario \n')
	menu = int(input('Digite uma opção : '))
	return menu	

####################################-----MAIN----########################################
#--PRIMEIRO MENU--#
def main():
	print(' 1 - Acesso Administrador \n 2 - Login de usuario \n')
	menu = int(input('Digite uma opção : '))

	dados = []
#login do root ----------------------------------------------
	if menu == 1: #entra administrador root
		adm = Administrador()
		if adm.login == 1 and adm.senha == 1:
			print(' 1 - Cadastrar novo usuário \n 2 - Aumentar limite de usuário \n')
			op = int(input('Digite uma opção: '))
			if op == 1: #QUER CADASTRAR NOVO USUÁRIO
				#esse loop serve para nos pedir se queremos continuar cadastrando pessoas. Até que sua resposta seja true ele continua pedindo 
				#pra vc cadastrar gente, agora, se o loop for false, significa que você pode prosseguir
				loop = 'false'

				while loop != 'true':

					dados.append(inserirDados())

					for i in range(len(dados)):
						print(dados[i].primeiro_nome)
						print(dados[i].ultimo_nome)
						print(dados[i].CPF)
						print(dados[i].senha)
						print(dados[i].limite_credito)
						print(dados[i].cartao)
					
					print('Deseja cadastrar +1 usuário? 1 - sim 2-não ')
					resposta = int(input('Digite uma opção: '))
					#usuario	
					if resposta == 2:
						loop = 'true'
						#tem que chamar o menu aqui de novo
########### login usuario -----------------------------------												
	if menu == 2:				
		print('Insira seus dados \n')
		nome = input('Insira seu 1º nome: ')
		senha = input('Insira sua senha: ')
		validarLogin(nome,senha)
		

main()

'''
	else:
				print(teste)#INACABADO... AQUI VAI TER QUE VERIFICAR LOGIN DA PESSOA QUE QUER AUMENTAR O SALDO
		else:
			print('Login incorreto')		
	else: 
		validarLogin(usuario, senha) #INACABADO'''
